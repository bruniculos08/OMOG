[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cubic_hermite_coeffs",
        "kind": 2,
        "importPath": "Hermite.CubicHermite3D",
        "description": "Hermite.CubicHermite3D",
        "peekOfCode": "def cubic_hermite_coeffs(p0, p1, u0, u1, t):\n    # Iremos supor que o parâmetro t varia restrito ao intervalo [t0, t1]\n    T = []\n    # O range poderia variar de 0 à 4 pois temos 4 equações para cada variável (e portanto 4 linhas na matriz T),...\n    # ... mas como temos que tratar de equações com formatos diferentes vamos fazer dois laços cobrindo metade do range cada:\n    for i in range(0, 2): \n        T_line = []\n        for j in range(0, 4):\n            value = t[i]**(3-j)\n            T_line.append(value)",
        "detail": "Hermite.CubicHermite3D",
        "documentation": {}
    },
    {
        "label": "build_func",
        "kind": 2,
        "importPath": "Hermite.CubicHermite3D",
        "description": "Hermite.CubicHermite3D",
        "peekOfCode": "def build_func(coeffs):\n    def f(t):\n        x = 0\n        y = 0\n        z = 0\n        for i in range(len(coeffs), 0, -1):\n            x += coeffs[len(coeffs) - i][0]*(t**(i-1))\n            y += coeffs[len(coeffs) - i][1]*(t**(i-1))\n            z += coeffs[len(coeffs) - i][2]*(t**(i-1))\n        return [x, y, z]",
        "detail": "Hermite.CubicHermite3D",
        "documentation": {}
    }
]